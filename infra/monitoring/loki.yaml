apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: loki
  namespace: monitoring
spec:
  interval: 5m
  timeout: 2m
  chart:
    spec:
      chart: loki
      version: "6.6.3"
      interval: 5m
      sourceRef:
        kind: HelmRepository
        name: grafana
  values:
    serviceAccount:
      name: tf-service-role-for-loki
      create: true
      annotations:
        "eks.amazonaws.com/role-arn": "arn:aws:iam::457591490960:role/tf-service-role-for-loki"
    loki:
      auth_enabled: false
      rulerConfig:
        storage:
          type: local
          local:
            directory: /var/loki/rules
        rule_path: "/var/loki/rules-temp"
        ring:
          kvstore:
            store: inmemory
        alertmanager_url: http://_http-web._tcp.alertmanager-operated.monitoring.svc.cluster.local:9093
        enable_alertmanager_v2: true
      schemaConfig:
        configs:
          - from: "2024-04-01"
            store: tsdb
            object_store: s3
            schema: v13
            index:
              prefix: index_
              period: 24h
      tracing:
        enabled: true
      storage:
        type: "s3"
        s3:
          region: ap-east-1
        bucketNames:
          chunks: mscoin-prod-loki
          ruler: mscoin-prod-loki
          admin: mscoin-prod-loki
    gateway:
      replicas: 2
      nodeSelector:
        nodegroup: "k8s-core"
      resources:
        requests:
          cpu: 20m
          memory: 50Mi
        limits:
          cpu: 50m
          memory: 100Mi
      ingress:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "lets-encrypt"
        hosts:
          - host: loki-gateway.prod.mscoin-data.com
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - loki-gateway.prod.mscoin-data.com
            secretName: loki-gateway-prod-tls
    write:
      nodeSelector:
        nodegroup: "k8s-core"
      replicas: 2
      resources:
        requests:
          cpu: 100m
          memory: 1000Mi
        limits:
          cpu: 200m
          memory: 2000Mi
    read:
      nodeSelector:
        nodegroup: "k8s-core"
        topology.kubernetes.io/zone: "ap-east-1c"
      replicas: 2
      resources:
        requests:
          cpu: 200m
          memory: 500Mi
        limits:
          cpu: 1000m
          memory: 2000Mi
    lokiCanary:
      nodeSelector:
        nodegroup: "k8s-core"
        topology.kubernetes.io/zone: "ap-east-1c"
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
        limits:
          cpu: 50m
          memory: 100Mi
    backend:
      extraVolumeMounts:
        - name: rules
          mountPath: "/var/loki/rules/fake"
      extraVolumes:
        - name: rules
          configMap:
            name: loki-alerting-rules
      nodeSelector:
        nodegroup: "k8s-core"
        topology.kubernetes.io/zone: "ap-east-1c"
      replicas: 2
      resources:
        requests:
          cpu: 50m
          memory: 200Mi
        limits:
          cpu: 50m
          memory: 400Mi
    resultsCache:
      nodeSelector:
        nodegroup: "k8s-core"
        topology.kubernetes.io/zone: "ap-east-1c"
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
        limits:
          cpu: 50m
          memory: 100Mi
    chunksCache:
      nodeSelector:
        nodegroup: "k8s-core"
        topology.kubernetes.io/zone: "ap-east-1c"
      resources:
        requests:
          cpu: 50m
          memory: 500Mi
        limits:
          cpu: 100m
          memory: 2000Mi
    tableManager:
      retention_deletes_enabled: true
      retention_period: 360h
    monitoring:
      enabled: true
      dashboards:
        enabled: true
      rules:
        enabled: true
      serviceMonitor:
        enabled: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-alerting-rules
  namespace: monitoring
data:
  rules.yaml: |-
    groups:
    - name: loki-alerts
      rules:
        - alert: SolanaL1MainPriceAlert
          expr: count_over_time({app="solana-l1-swap-relevant-record"} |= "detected main token"[30s]) > 0
          for: 1s
          labels:
              severity: P1
          annotations:
              summary: "price engine main price wrong"
              description: "{{ $value }} price engine main price wrong"
        - alert: BscL1MainPriceAlert
          expr: count_over_time({app="bsc-l1-swap-relevant-record"} |= "detected main token"[30s]) > 0
          for: 1s
          labels:
              severity: P1
          annotations:
              summary: "price engine main price wrong"
              description: "{{ $value }} price engine main price wrong"
